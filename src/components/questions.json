[
  {
    "question": "Vad är ett state i React?",
    "options": [
      "Ett immutabelt värde",
      "En lokal lagring av data i komponenten",
      "Ett globalt värde som delas över hela appen"
    ],
    "answer": "En lokal lagring av data i komponenten"
  },
  {
    "question": "Hur hanteras events i React?",
    "options": [
      "Genom att använda event handlers",
      "Med hjälp av hooks",
      "Genom att manipulera DOM direkt"
    ],
    "answer": "Genom att använda event handlers"
  },
  {
    "question": "Vad är en prop i React?",
    "options": [
      "En variabel i JavaScript",
      "Ett objekt som skickas till komponenter",
      "En funktion som används för att uppdatera state"
    ],
    "answer": "Ett objekt som skickas till komponenter"
  },
  {
    "question": "Vilket av följande är ett gyllene recept för att optimera React-applikationer?",
    "options": [
      "Använd så många useState som möjligt",
      "Optimera rendering med memoization och shouldComponentUpdate",
      "Håll state lokalt så mycket som möjligt"
    ],
    "answer": "Håll state lokalt så mycket som möjligt"
  },
  {
    "question": "Vad är JSX?",
    "options": [
      "En JavaScript-fil som innehåller CSS",
      "En syntax för att skriva HTML i JavaScript",
      "En metod för att hantera asynkrona API-anrop"
    ],
    "answer": "En syntax för att skriva HTML i JavaScript"
  },
  {
    "question": "Vilket hook används för att hämta data från en API i React?",
    "options": ["useFetch", "useData", "useEffect"],
    "answer": "useEffect"
  },
  {
    "question": "Vad används Closure för i JavaScript?",
    "options": [
      "Att lagra och återanvända variabler",
      "För att hantera synkronisering i React",
      "För att hantera externa API-anrop"
    ],
    "answer": "Att lagra och återanvända variabler"
  },
  {
    "question": "Vad är skillnaden mellan `let` och `const` i JavaScript?",
    "options": [
      "`let` kan ändras medan `const` inte kan ändras",
      "`const` är för block-scope variabler och `let` för function-scope",
      "Ingen skillnad, båda är likvärdiga"
    ],
    "answer": "`let` kan ändras medan `const` inte kan ändras"
  },
  {
    "question": "Vad gör funktionen `map()` i JavaScript?",
    "options": [
      "Transformerar varje element i en array till ett nytt element",
      "Reducerar arrayen till ett enskilt värde",
      "Tar bort duplicerade värden från arrayen"
    ],
    "answer": "Transformerar varje element i en array till ett nytt element"
  },
  {
    "question": "Vilket JavaScript-objekt används för att hantera asynkrona operationer?",
    "options": ["Promise", "Generator", "Async/Await"],
    "answer": "Promise"
  },
  {
    "question": "Vad innebär DOM i JavaScript?",
    "options": [
      "Document Object Model, struktur för att manipulera HTML",
      "En metod för att lagra databasuppgifter",
      "En process för att hämta data från externa API:er"
    ],
    "answer": "Document Object Model, struktur för att manipulera HTML"
  },
  {
    "question": "Hur fungerar `useContext` hook i React?",
    "options": [
      "Använder värden från en global kontext för att undvika prop-drilling",
      "Använder statisk typning för att optimera komponenter",
      "Hanterar direkt DOM-manipulation"
    ],
    "answer": "Använder värden från en global kontext för att undvika prop-drilling"
  },
  {
    "question": "Vilket objekt används för att hantera en uppsättning nyckel-värde par i JavaScript?",
    "options": ["Array", "Object", "Map"],
    "answer": "Map"
  },
  {
    "question": "Vad är ES6?",
    "options": [
      "En version av JavaScript som introducerade nya funktioner som arrow functions och template literals",
      "En äldre version av JavaScript utan funktioner för async/await",
      "En typ av databas för hantering av stora mängder data"
    ],
    "answer": "En version av JavaScript som introducerade nya funktioner som arrow functions och template literals"
  },
  {
    "question": "Vad är skillnaden mellan `==` och `===` i JavaScript?",
    "options": [
      "`==` jämför både typ och värde medan `===` endast jämför värdet",
      "`==` konverterar datatyper medan `===` inte gör det",
      "Ingen skillnad"
    ],
    "answer": "`==` konverterar datatyper medan `===` inte gör det"
  },
  {
    "question": "Vad är React Lifecycle Hooks?",
    "options": [
      "En metod för att hantera komponenternas livscykel som mount, update och unmount",
      "En funktion för att optimera renderingshastighet",
      "Enbart en metod för att hantera API-anrop"
    ],
    "answer": "En metod för att hantera komponenternas livscykel som mount, update och unmount"
  },
  {
    "question": "Vad används `useMemo` hook för i React?",
    "options": [
      "Använder memoization för att optimera prestanda genom att cachera beräkningar",
      "Hanterar asynkrona dataanrop",
      "Hantera styling i React-applikationer"
    ],
    "answer": "Använder memoization för att optimera prestanda genom att cachera beräkningar"
  },
  {
    "question": "Vilken metod används för att spara data lokalt i en webbläsare?",
    "options": ["LocalStorage", "SessionStorage", "Cookie"],
    "answer": "LocalStorage"
  },
  {
    "question": "Vad är skillnaden mellan `let` och `var` i JavaScript?",
    "options": [
      "`let` har block-scope och `var` har function-scope",
      "`var` kan ändras medan `let` är konstant",
      "Ingen skillnad"
    ],
    "answer": "`let` har block-scope och `var` har function-scope"
  }
]
